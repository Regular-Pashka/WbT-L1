package main

import (
	"fmt"
	"sync"
)

/*
	Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….) с использованием конкурентных вычислений.

*/

var wg sync.WaitGroup

/* 
	Будет две функции которые общаются между собой с помощью двух каналов, это будет маленькая версия пайплайна
	Первая функция получает на вход массив и канал in в который записывает квадраты чисел
	Вторая функция получает на вход канал in считывает из него числа
*/

func square(nums []int) <-chan int{
	out := make(chan int)
	go func() {
		for _, num := range nums {
			out <- num * num
		}
		close(out)
	}()
	return out
}

func sumOfChan(in <-chan int) {
	sum := 0
	for num := range in { // этот цикл будет продолжаться до тех пор, пока канал не будет закрыт! тоесть пока канал out из прошлой горутины не закроется, а закроется он только тогда, когда все значения из массива пройдут через него. 

		sum += num
	}
	fmt.Println(sum)
}

func main() {
	// sum := 0
	nums := []int{2, 4}
	in := square(nums)
	sumOfChan(in)
}
